{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ASP.NET Core Database Programming Enterprise database application development with ASP.NET Core, Entity Framework Core, ADO.NET and Object Relational Mapping (ORM), interacting with different data-sources including SQL, NoSQL, SQLite, MySQL, JSON, XML, Excel and etc. Note: This is a work-in-progress book project, based on the latest stabled version of the framework. As in any work-in-progress project, frequent updates are expected. Part-1: Introduction Ch01: Introduction Why ASP.NET Core Pros Cons Prerequisites Ch02: Data, data-management and databases Data Data security and privacy Confidentiality, Integrity and Availability (CIA) Data management Data sources Databases Ch03: Database programming intro Application is all about data Structured and un-structured data SQL and NoSQL Databases 101 LINQ Structured Query Language (SQL) Ch04: Development environment Windows 10 workstation Visual Studio 2019 SQL Server Management Studio (SSMS) Azure Data Studio Visual Studio Code Postman Part-2: Foundation Knowledge Ch05: ASP.NET Core Fundamentals HTTP request and response Middleware Routing Configuration Security & data-access control Debugging Logging Design patterns Dependency injection Option Repository Ch06: Data Sources Microsoft SQL Server LocalDB Azure SQL database MySQL MariaDB PostgreSQL SQLite CosmoDB Other data sources Ch07: Database programming 101 Connect to data sources Entity Framework Core ADO.NET Object Relational Mapping (ORM) LINQ Structured Query Language (SQL) Part-3: Database Application Ch08: N-tier layered data access Loosely coupled design Normalized data Don't trust the data Data security checkpoints Data privacy checkpoints Ch09: Data Service Providers (WebAPI) Entity Framework Core data service provider ADO.NET data service provider Using object relational mapping (ORM) Testing WebAPI with Postman Ch10: Data Consumers JavaScript client ASP.NET Webform client ASP.NET Core MVC client ASP.NET Core Razor client Blazor server-side client Blazor WebAssembly client Part-4: Securing & Monitoring Data Access Ch11: Securing data access HTTPS ASP.NET Core Identity Authentication Authorization JSON Web tokens Multi factor authentication Data encryption ch12: Logging and monitoring Debugging and Logging Monitoring and Logging Ch13: External and third-party authentication Facebook authentication Google authentication Twitter authentication Azure AD authentication","title":"Home"},{"location":"#aspnet-core-database-programming","text":"Enterprise database application development with ASP.NET Core, Entity Framework Core, ADO.NET and Object Relational Mapping (ORM), interacting with different data-sources including SQL, NoSQL, SQLite, MySQL, JSON, XML, Excel and etc. Note: This is a work-in-progress book project, based on the latest stabled version of the framework. As in any work-in-progress project, frequent updates are expected.","title":"ASP.NET Core Database Programming"},{"location":"#part-1-introduction","text":"Ch01: Introduction Why ASP.NET Core Pros Cons Prerequisites Ch02: Data, data-management and databases Data Data security and privacy Confidentiality, Integrity and Availability (CIA) Data management Data sources Databases Ch03: Database programming intro Application is all about data Structured and un-structured data SQL and NoSQL Databases 101 LINQ Structured Query Language (SQL) Ch04: Development environment Windows 10 workstation Visual Studio 2019 SQL Server Management Studio (SSMS) Azure Data Studio Visual Studio Code Postman","title":"Part-1: Introduction"},{"location":"#part-2-foundation-knowledge","text":"Ch05: ASP.NET Core Fundamentals HTTP request and response Middleware Routing Configuration Security & data-access control Debugging Logging Design patterns Dependency injection Option Repository Ch06: Data Sources Microsoft SQL Server LocalDB Azure SQL database MySQL MariaDB PostgreSQL SQLite CosmoDB Other data sources Ch07: Database programming 101 Connect to data sources Entity Framework Core ADO.NET Object Relational Mapping (ORM) LINQ Structured Query Language (SQL)","title":"Part-2: Foundation Knowledge"},{"location":"#part-3-database-application","text":"Ch08: N-tier layered data access Loosely coupled design Normalized data Don't trust the data Data security checkpoints Data privacy checkpoints Ch09: Data Service Providers (WebAPI) Entity Framework Core data service provider ADO.NET data service provider Using object relational mapping (ORM) Testing WebAPI with Postman Ch10: Data Consumers JavaScript client ASP.NET Webform client ASP.NET Core MVC client ASP.NET Core Razor client Blazor server-side client Blazor WebAssembly client","title":"Part-3: Database Application"},{"location":"#part-4-securing-monitoring-data-access","text":"Ch11: Securing data access HTTPS ASP.NET Core Identity Authentication Authorization JSON Web tokens Multi factor authentication Data encryption ch12: Logging and monitoring Debugging and Logging Monitoring and Logging Ch13: External and third-party authentication Facebook authentication Google authentication Twitter authentication Azure AD authentication","title":"Part-4: Securing &amp; Monitoring Data Access"},{"location":"about/","text":"About This is a work-in-progress book project about database programming using ASP.NET Core, Entity Framework Core and ADO.NET, targeting SQL Server, SQLite, MySQL, JSON, XML and different data sources. Self contained content The content is created as collection of references, where you can jump directly into any one of the chapter to learn about the chapter's subject matter. Each chapter and associated sample codes are self contain with little or no dependency on other chapters. The dependencies are common models and class libraries, which can easily be included to a project via the \"Add Project Reference\" option. Secure, Efficient, Manageable and Testable In addition to knowing the programming language and associated technologies, Design-Principle (such as SOLID and DRY) and Design-Patterns are important keys to developing manageable, efficient and secure codes with minimal technical debt . . . While my intention for the content is to talk about the technology and how to use them, Security, Design-Principle and Design-Patterns are important keys in creating \"Secure, Efficient, Manageable and Testable\" codes, a few chapters are allocated to talk about these subjects. Samuel Phung https://twitter.com/samuelp101 https://www.linkedin.com/in/samuelp101/","title":"About"},{"location":"about/#about","text":"This is a work-in-progress book project about database programming using ASP.NET Core, Entity Framework Core and ADO.NET, targeting SQL Server, SQLite, MySQL, JSON, XML and different data sources.","title":"About"},{"location":"about/#self-contained-content","text":"The content is created as collection of references, where you can jump directly into any one of the chapter to learn about the chapter's subject matter. Each chapter and associated sample codes are self contain with little or no dependency on other chapters. The dependencies are common models and class libraries, which can easily be included to a project via the \"Add Project Reference\" option.","title":"Self contained content"},{"location":"about/#secure-efficient-manageable-and-testable","text":"In addition to knowing the programming language and associated technologies, Design-Principle (such as SOLID and DRY) and Design-Patterns are important keys to developing manageable, efficient and secure codes with minimal technical debt . . . While my intention for the content is to talk about the technology and how to use them, Security, Design-Principle and Design-Patterns are important keys in creating \"Secure, Efficient, Manageable and Testable\" codes, a few chapters are allocated to talk about these subjects. Samuel Phung https://twitter.com/samuelp101 https://www.linkedin.com/in/samuelp101/","title":"Secure, Efficient, Manageable and Testable"},{"location":"ch01/","text":"Introduction Why ASP.NET Core? It's difficult to adequately address this question without some level of bias, where many of the key factors are highly opinionated depending on your own technology preference, area of interest, existing knowledge, familiarity with the technology, personal view about the marketplace and competition. In addition, answering this question as an individual developer without business consideration can be very different from answering this question with business consideration. In general, all software frameworks each has certain benefits, created to help improve development efficiency, minimize repetitive codes and simplify code-complexity. Comparing with some other disciplines, such as music, mathematic and medical-science which have been around for thousands of years, the software development domain is very young, only been around for less than 80 years with lots of room for new innovation and improvement. And, some of the newer software development disciplines, such as artificial intelligence, data-science and machine-learning are even younger, evolved within the last 10 to 20 years or so. Over the past half-centry, the software development environment has been through multiple evolutions, changed from using mainframe computers on the back-end with terminal-clients on the front-end, to PC-based client-server model. Then, within the last 20 years, as the result from the explosive growth in the Internet, mobile-device and cloud-computing marketplaces, mobile and web-based application became important development focus areas that impacted just about every software technology company in the world. In the foreseeable future, computing-hardware, information-technology-infrastructure, cybersecurity, privacy-concerns, legal-mandates and market-expectations that impact software development are expected to go through dramatic changes. A software framework rated as the best this year by some organization, may be forgotten or abandoned in just a few years. The software development environment is humongous, and you don't have to work with the most popular ones to be successful. In fact, focusing on certain specialty can yield higher pay and rewarding career path. When selecting a software or application development framework, for an enterprise application project with long life-cycle and serious financial impact, it's prudent to include the following considerations: Framework/Technology maturity Cybersecurity and legal concerns Community and support Development environment and tools Deployment and maintenance environment and tools Licensing Available pool of talents Technical debt associate with the project's life-cycle Pros and Cons Talking about a technology platform's Pros and Cons is highly opinionated. A pros for one developer can become a cons for another developer, and vise versa. Instead of talking about specific technical specification, let's look the the pros and cons based on general common sense consideration. Pros Mature with highly active and continuous improvement since 2002 Open-source, support and maintain by well established technology company with strong financial and technical resources Actively supported by large number of global community spanning across the world Lots of technical contents and learning resources available (books, articles, blog-posts, videos, usergroup, in-person) Cross platform deployment (production codes can be deployed onto Windows, Linux and Max operating system) Cross platform professional grade development tools available at no cost. Visual Studio (supports Windows and Max) and Visual Studio Code (supports Windows, Mac and Linux) Large pool of extension and support resources Cons It's an opinionated framework Fairly large and complex code base, which requires quite a bit of times and efforts to learn and understand","title":"1. Introduction"},{"location":"ch01/#introduction","text":"","title":"Introduction"},{"location":"ch01/#why-aspnet-core","text":"It's difficult to adequately address this question without some level of bias, where many of the key factors are highly opinionated depending on your own technology preference, area of interest, existing knowledge, familiarity with the technology, personal view about the marketplace and competition. In addition, answering this question as an individual developer without business consideration can be very different from answering this question with business consideration. In general, all software frameworks each has certain benefits, created to help improve development efficiency, minimize repetitive codes and simplify code-complexity. Comparing with some other disciplines, such as music, mathematic and medical-science which have been around for thousands of years, the software development domain is very young, only been around for less than 80 years with lots of room for new innovation and improvement. And, some of the newer software development disciplines, such as artificial intelligence, data-science and machine-learning are even younger, evolved within the last 10 to 20 years or so. Over the past half-centry, the software development environment has been through multiple evolutions, changed from using mainframe computers on the back-end with terminal-clients on the front-end, to PC-based client-server model. Then, within the last 20 years, as the result from the explosive growth in the Internet, mobile-device and cloud-computing marketplaces, mobile and web-based application became important development focus areas that impacted just about every software technology company in the world. In the foreseeable future, computing-hardware, information-technology-infrastructure, cybersecurity, privacy-concerns, legal-mandates and market-expectations that impact software development are expected to go through dramatic changes. A software framework rated as the best this year by some organization, may be forgotten or abandoned in just a few years. The software development environment is humongous, and you don't have to work with the most popular ones to be successful. In fact, focusing on certain specialty can yield higher pay and rewarding career path. When selecting a software or application development framework, for an enterprise application project with long life-cycle and serious financial impact, it's prudent to include the following considerations: Framework/Technology maturity Cybersecurity and legal concerns Community and support Development environment and tools Deployment and maintenance environment and tools Licensing Available pool of talents Technical debt associate with the project's life-cycle","title":"Why ASP.NET Core?"},{"location":"ch01/#pros-and-cons","text":"Talking about a technology platform's Pros and Cons is highly opinionated. A pros for one developer can become a cons for another developer, and vise versa. Instead of talking about specific technical specification, let's look the the pros and cons based on general common sense consideration.","title":"Pros and Cons"},{"location":"ch01/#pros","text":"Mature with highly active and continuous improvement since 2002 Open-source, support and maintain by well established technology company with strong financial and technical resources Actively supported by large number of global community spanning across the world Lots of technical contents and learning resources available (books, articles, blog-posts, videos, usergroup, in-person) Cross platform deployment (production codes can be deployed onto Windows, Linux and Max operating system) Cross platform professional grade development tools available at no cost. Visual Studio (supports Windows and Max) and Visual Studio Code (supports Windows, Mac and Linux) Large pool of extension and support resources","title":"Pros"},{"location":"ch01/#cons","text":"It's an opinionated framework Fairly large and complex code base, which requires quite a bit of times and efforts to learn and understand","title":"Cons"},{"location":"ch02/","text":"Data, Data-Management and Databases Data Regardless of the technology platform, targeted users or industries, all software application are designed to deal with data, and interact with different sources of data, including data from different sources, including database, Excel file, CSV file, JSON file, XML file, Web-API, Web-Services and etc. Data security and Privacy Data security and privacy are key concerns in today's application. In addition to preventing data breach, there are distinct legal mandates in different jurisdiction, which we must follow to avoid legal consequences. Confidentiality, integrity and availability (CIA) While the contents for this book is not about security, it's necessary for enterprise database application developer to have general understanding about CIA security concerns in database application, which is short for Confidentiality, Integrity and Availability. Confidentiality We need to ensure adequate access controls are implemented to prevent unauthorized access to data. Integrity We need to implement adequate protection to ensure data accuracy, consistency, and prevent unauthorized data tempering. Availability We need to implement adequate measures to keep data accessible by authorized entities. Data management In an large organization, there is generally a separate data management team, tasked with the responsibilities to maintain the organization's data, data storage infrastructure and controlling access to data. As a database programmer, you need to have general understanding about data management, including: Database creation, backup and restore Database queries and updates Database access control Managing database server access keys and secrets Etc. Data sources Data and database are two separate subjects. There are different data sources, which may not be coming from a database such as: CSV, JSON or XML files Web-API or Web-Services Data stream from IoT devices Etc. Databases There are different type of databases, for different environments and purposes such as: Microsoft SQL Server Azure SQL SQLite Cosmos DB MySQL PostgreSQL Oracle Access Etc.","title":"2. Data, data-management & database"},{"location":"ch02/#data-data-management-and-databases","text":"","title":"Data, Data-Management and Databases"},{"location":"ch02/#data","text":"Regardless of the technology platform, targeted users or industries, all software application are designed to deal with data, and interact with different sources of data, including data from different sources, including database, Excel file, CSV file, JSON file, XML file, Web-API, Web-Services and etc.","title":"Data"},{"location":"ch02/#data-security-and-privacy","text":"Data security and privacy are key concerns in today's application. In addition to preventing data breach, there are distinct legal mandates in different jurisdiction, which we must follow to avoid legal consequences.","title":"Data security and Privacy"},{"location":"ch02/#confidentiality-integrity-and-availability-cia","text":"While the contents for this book is not about security, it's necessary for enterprise database application developer to have general understanding about CIA security concerns in database application, which is short for Confidentiality, Integrity and Availability.","title":"Confidentiality, integrity and availability (CIA)"},{"location":"ch02/#confidentiality","text":"We need to ensure adequate access controls are implemented to prevent unauthorized access to data.","title":"Confidentiality"},{"location":"ch02/#integrity","text":"We need to implement adequate protection to ensure data accuracy, consistency, and prevent unauthorized data tempering.","title":"Integrity"},{"location":"ch02/#availability","text":"We need to implement adequate measures to keep data accessible by authorized entities.","title":"Availability"},{"location":"ch02/#data-management","text":"In an large organization, there is generally a separate data management team, tasked with the responsibilities to maintain the organization's data, data storage infrastructure and controlling access to data. As a database programmer, you need to have general understanding about data management, including: Database creation, backup and restore Database queries and updates Database access control Managing database server access keys and secrets Etc.","title":"Data management"},{"location":"ch02/#data-sources","text":"Data and database are two separate subjects. There are different data sources, which may not be coming from a database such as: CSV, JSON or XML files Web-API or Web-Services Data stream from IoT devices Etc.","title":"Data sources"},{"location":"ch02/#databases","text":"There are different type of databases, for different environments and purposes such as: Microsoft SQL Server Azure SQL SQLite Cosmos DB MySQL PostgreSQL Oracle Access Etc.","title":"Databases"},{"location":"ch03/","text":"Database Programming Intro Application is about data Data is the most important aspect of an application. Whether you are developing application for the consumer, large enterprises, embedded devices, industrial automation control systems, accounting systems, customer relationship management, enterprise resource planning and etc., All application are written to interact with different kind of data, such as: Data about customers, products and services Telemetry data from embedded and IoT devices Data about different machinery and equipment's operating status Business transaction data Patient data for healthcare Lab and research data for medical, science and engineering Election voting data Data about social media Etc. An application's value is directly link to the data it interact with. Without data, an application has no value. Developing Application Needs More Than Coding Regardless of the chosen programming language and development platform, in order to develop an application, you need to have clear understanding about the aplication's objectives, targeted audiences, required input (data) and expected output (data). In an application development project, coding is actually the easier part. One of the key challenges in developing application is the architecting of the application to meet the prescribed objectives, using design patterns and development methodology that produce a manageable code base best suited for the project's life-cycle. In addit with the best return on investment, while minimize the risk of technology obsolescence that forces unnecessary re-development. Structured and un-structured data Depending on the application and intended purposes, data can be in different forms: Structured and un-structured data in different type of files, such as Excel, CSV, JSON, XML, Text and etc. Structured data in different type of databases, such as Microsoft SQL Server, MySQL, MariaDB, Oracle, PostgreSQL, SQLite, Azure SQL Table, CosmoDB, MongoDB and etc. In general, most database application are written to interact with structured data, or transform un-structured data into structured before processing. Databases 101 SQL and NoSQL LINQ Structured Query Language (SQL)","title":"3. Database Programming Intro"},{"location":"ch03/#database-programming-intro","text":"","title":"Database Programming Intro"},{"location":"ch03/#application-is-about-data","text":"Data is the most important aspect of an application. Whether you are developing application for the consumer, large enterprises, embedded devices, industrial automation control systems, accounting systems, customer relationship management, enterprise resource planning and etc., All application are written to interact with different kind of data, such as: Data about customers, products and services Telemetry data from embedded and IoT devices Data about different machinery and equipment's operating status Business transaction data Patient data for healthcare Lab and research data for medical, science and engineering Election voting data Data about social media Etc. An application's value is directly link to the data it interact with. Without data, an application has no value.","title":"Application is about data"},{"location":"ch03/#developing-application-needs-more-than-coding","text":"Regardless of the chosen programming language and development platform, in order to develop an application, you need to have clear understanding about the aplication's objectives, targeted audiences, required input (data) and expected output (data). In an application development project, coding is actually the easier part. One of the key challenges in developing application is the architecting of the application to meet the prescribed objectives, using design patterns and development methodology that produce a manageable code base best suited for the project's life-cycle. In addit with the best return on investment, while minimize the risk of technology obsolescence that forces unnecessary re-development.","title":"Developing Application Needs More Than Coding"},{"location":"ch03/#structured-and-un-structured-data","text":"Depending on the application and intended purposes, data can be in different forms: Structured and un-structured data in different type of files, such as Excel, CSV, JSON, XML, Text and etc. Structured data in different type of databases, such as Microsoft SQL Server, MySQL, MariaDB, Oracle, PostgreSQL, SQLite, Azure SQL Table, CosmoDB, MongoDB and etc. In general, most database application are written to interact with structured data, or transform un-structured data into structured before processing.","title":"Structured and un-structured data"},{"location":"ch03/#databases-101","text":"","title":"Databases 101"},{"location":"ch03/#sql-and-nosql","text":"","title":"SQL and NoSQL"},{"location":"ch03/#linq","text":"","title":"LINQ"},{"location":"ch03/#structured-query-language-sql","text":"","title":"Structured Query Language (SQL)"},{"location":"ch04/","text":"Development Environment Windows 10 workstation Visual Studio 2019 SQL Server Management Studio (SSMS) Azure Data Studio Visual Studio Code Postman","title":"4. Development Environment"},{"location":"ch04/#development-environment","text":"","title":"Development Environment"},{"location":"ch04/#windows-10-workstation","text":"","title":"Windows 10 workstation"},{"location":"ch04/#visual-studio-2019","text":"","title":"Visual Studio 2019"},{"location":"ch04/#sql-server-management-studio-ssms","text":"","title":"SQL Server Management Studio (SSMS)"},{"location":"ch04/#azure-data-studio","text":"","title":"Azure Data Studio"},{"location":"ch04/#visual-studio-code","text":"","title":"Visual Studio Code"},{"location":"ch04/#postman","text":"","title":"Postman"},{"location":"ch05/","text":"ASP.NET Core Fundamentals HTTP request and response Middleware Routing Configuration Security and access control Debugging Logging Design patterns Dependency injection Option Repository","title":"5. ASP.NET Core 101"},{"location":"ch05/#aspnet-core-fundamentals","text":"","title":"ASP.NET Core Fundamentals"},{"location":"ch05/#http-request-and-response","text":"","title":"HTTP request and response"},{"location":"ch05/#middleware","text":"","title":"Middleware"},{"location":"ch05/#routing","text":"","title":"Routing"},{"location":"ch05/#configuration","text":"","title":"Configuration"},{"location":"ch05/#security-and-access-control","text":"","title":"Security and access control"},{"location":"ch05/#debugging","text":"","title":"Debugging"},{"location":"ch05/#logging","text":"","title":"Logging"},{"location":"ch05/#design-patterns","text":"Dependency injection Option Repository","title":"Design patterns"},{"location":"ch06/","text":"Data Sources Microsoft SQL Server LocalDB Azure SQL database MySQL MariaDB PostgreSQL SQLite CosmoDB Other data sources JSON XML Text based (CSV)","title":"6. Data Sources"},{"location":"ch06/#data-sources","text":"","title":"Data Sources"},{"location":"ch06/#microsoft-sql-server","text":"","title":"Microsoft SQL Server"},{"location":"ch06/#localdb","text":"","title":"LocalDB"},{"location":"ch06/#azure-sql-database","text":"","title":"Azure SQL database"},{"location":"ch06/#mysql","text":"","title":"MySQL"},{"location":"ch06/#mariadb","text":"","title":"MariaDB"},{"location":"ch06/#postgresql","text":"","title":"PostgreSQL"},{"location":"ch06/#sqlite","text":"","title":"SQLite"},{"location":"ch06/#cosmodb","text":"","title":"CosmoDB"},{"location":"ch06/#other-data-sources","text":"JSON XML Text based (CSV)","title":"Other data sources"},{"location":"ch07/","text":"Database Programming Fundamentals Connect to data sources Entity Framework Core ADO.NET Object Relational Mapping (ORM) LINQ SQL stored procedure","title":"7. Databases Programming 101"},{"location":"ch07/#database-programming-fundamentals","text":"","title":"Database Programming Fundamentals"},{"location":"ch07/#connect-to-data-sources","text":"","title":"Connect to data sources"},{"location":"ch07/#entity-framework-core","text":"","title":"Entity Framework Core"},{"location":"ch07/#adonet","text":"","title":"ADO.NET"},{"location":"ch07/#object-relational-mapping-orm","text":"","title":"Object Relational Mapping (ORM)"},{"location":"ch07/#linq","text":"","title":"LINQ"},{"location":"ch07/#sql-stored-procedure","text":"","title":"SQL stored procedure"},{"location":"ch08/","text":"N-tier Layered Data Access Loosely coupled design Normalized data Don't trusted the data Data security checkpoint Data privacy checkpoint","title":"8. N-tier Layered Data Access"},{"location":"ch08/#n-tier-layered-data-access","text":"","title":"N-tier Layered Data Access"},{"location":"ch08/#loosely-coupled-design","text":"","title":"Loosely coupled design"},{"location":"ch08/#normalized-data","text":"","title":"Normalized data"},{"location":"ch08/#dont-trusted-the-data","text":"","title":"Don't trusted the data"},{"location":"ch08/#data-security-checkpoint","text":"","title":"Data security checkpoint"},{"location":"ch08/#data-privacy-checkpoint","text":"","title":"Data privacy checkpoint"},{"location":"ch09/","text":"Data Service Providers (WebAPI) Entity Framewor Core service provider ADO.NET service provider Using object relational mapping (ORM) Testing WebAPI with Postman","title":"9. Data Service Providers (WebAPI)"},{"location":"ch09/#data-service-providers-webapi","text":"","title":"Data Service Providers (WebAPI)"},{"location":"ch09/#entity-framewor-core-service-provider","text":"","title":"Entity Framewor Core service provider"},{"location":"ch09/#adonet-service-provider","text":"","title":"ADO.NET service provider"},{"location":"ch09/#using-object-relational-mapping-orm","text":"","title":"Using object relational mapping (ORM)"},{"location":"ch09/#testing-webapi-with-postman","text":"","title":"Testing WebAPI with Postman"},{"location":"ch10/","text":"Data Consumers JavaScript client ASP.NET Webform ASP.NET Core MVC ASP.NET Core Razor page Blazor (server-side) Blazor (WebAssembly)","title":"10. Data Consumers"},{"location":"ch10/#data-consumers","text":"","title":"Data Consumers"},{"location":"ch10/#javascript-client","text":"","title":"JavaScript client"},{"location":"ch10/#aspnet-webform","text":"","title":"ASP.NET Webform"},{"location":"ch10/#aspnet-core-mvc","text":"","title":"ASP.NET Core MVC"},{"location":"ch10/#aspnet-core-razor-page","text":"","title":"ASP.NET Core Razor page"},{"location":"ch10/#blazor-server-side","text":"","title":"Blazor (server-side)"},{"location":"ch10/#blazor-webassembly","text":"","title":"Blazor (WebAssembly)"},{"location":"ch11/","text":"Securing Data Access HTTPS ASP.NET Core Identity Authentication Authorization JSON Web tokens Multi factor authentication Data encryption","title":"11. Securing Data Access"},{"location":"ch11/#securing-data-access","text":"","title":"Securing Data Access"},{"location":"ch11/#https","text":"","title":"HTTPS"},{"location":"ch11/#aspnet-core-identity","text":"","title":"ASP.NET Core Identity"},{"location":"ch11/#authentication","text":"","title":"Authentication"},{"location":"ch11/#authorization","text":"","title":"Authorization"},{"location":"ch11/#json-web-tokens","text":"","title":"JSON Web tokens"},{"location":"ch11/#multi-factor-authentication","text":"","title":"Multi factor authentication"},{"location":"ch11/#data-encryption","text":"","title":"Data encryption"},{"location":"ch12/","text":"Logging and Monitoring Debugging and logging Monitoring and logging","title":"12. Logging and Monitoring"},{"location":"ch12/#logging-and-monitoring","text":"","title":"Logging and Monitoring"},{"location":"ch12/#debugging-and-logging","text":"","title":"Debugging and logging"},{"location":"ch12/#monitoring-and-logging","text":"","title":"Monitoring and logging"},{"location":"ch13/","text":"External and Third-party Authentication Facebook authentication Google authentication Twitter authentication Azure AD authentication","title":"13. External & Third-party authentication"},{"location":"ch13/#external-and-third-party-authentication","text":"","title":"External and Third-party Authentication"},{"location":"ch13/#facebook-authentication","text":"","title":"Facebook authentication"},{"location":"ch13/#google-authentication","text":"","title":"Google authentication"},{"location":"ch13/#twitter-authentication","text":"","title":"Twitter authentication"},{"location":"ch13/#azure-ad-authentication","text":"","title":"Azure AD authentication"}]}